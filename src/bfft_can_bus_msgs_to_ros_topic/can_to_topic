#!/usr/bin/env python3
# coding: utf-8

"""
#  * @file can_to_topic
#  * @brief ROS node for decoding incoming CAN bus messages and extracting
#  * them into different topics
#  * @authors Alex Sperka
#  * @date 17.03.2021
"""

import time

import rospy

from sensor_msgs.msg import NavSatFix, Imu
from can_msgs.msg import Frame
from bfft_can_bus_msgs_to_ros_topic.msg import CanIdMsgs
from bfft_can_bus_msgs_to_ros_topic.msg import AdmaStatusErrorsMsgs

from bfft_can_bus_msgs_to_ros_topic.utilities_IMU.gps_class import GPSClass
from bfft_can_bus_msgs_to_ros_topic.utilities_IMU.imu_class import IMUClass
from bfft_can_bus_msgs_to_ros_topic.utilities_IMU.utility_classes import StatusErrorClass, UnknownCANIdsClass

import cantools
import transforms3d

def decode_can_bus_msgs():
    """Receive all CAN Data from ROS Channel received_messages, decode it using
    the DBC Files defined in the Launch file and stream it to the relating topics"""

    gps_data = GPSClass()
    imu_data = IMUClass()
    status_errors = StatusErrorClass()
    unknown_can_id_data = UnknownCANIdsClass()

    pub_gps = rospy.Publisher("imu/gps_data", NavSatFix, queue_size=10)
    pub_imu = rospy.Publisher("imu/imu_data", Imu, queue_size=10)
    pub_unknown_ids = rospy.Publisher("can/unknown_ids", CanIdMsgs, queue_size=10)
    pub_status_errors = rospy.Publisher(
        "imu/status_errors", AdmaStatusErrorsMsgs, queue_size=10
    )

    # get parameters from launch file
    path_to_adma_dbc_file = rospy.get_param("/can_to_topic/path_to_adma_dbc_file")
    path_to_sensor_dbc_file = rospy.get_param("/can_to_topic/path_to_sensor_dbc_file")

    dbc_adma_file = open(path_to_adma_dbc_file, "r", encoding="iso-8859-1")
    db_adma = cantools.database.load(dbc_adma_file)

    dbc_sensor_file = open(path_to_sensor_dbc_file, "r", encoding="iso-8859-1")
    db_sensors = cantools.database.load(dbc_sensor_file)

    base_id_adma = int(rospy.get_param("/can_to_topic/base_id_adma"))

    def __convert_msgs(msg_frame, decoded_msgs):
        can_id = msg_frame.id
        header = msg_frame.header

        secs = header.stamp.secs
        nsecs = header.stamp.nsecs

        def __status_bits():
            status_errors.set_status(decoded_msgs)

        def __error_bits():
            status_errors.set_errors(decoded_msgs)

        def __rates_body():
            ang_vel_x = decoded_msgs["RXB"]
            ang_vel_y = decoded_msgs["RYB"]
            ang_vel_z = decoded_msgs["RZB"]
            imu_data.set_angular_velocity(ang_vel_x, ang_vel_y, ang_vel_z)

        def __acc_body():
            lin_acc_x = decoded_msgs["AXB"]
            lin_acc_y = decoded_msgs["AYB"]
            lin_acc_z = decoded_msgs["AZB"]
            imu_data.set_linear_acceleration(lin_acc_x, lin_acc_y, lin_acc_z)

        def __euler_to_quaternions():
            roll = decoded_msgs["Angle_Roll"]
            pitch = decoded_msgs["Angle_Pitch"]
            yaw = decoded_msgs["Angle_Yaw"]

            ## tf not available with python3 and ros melodic so using transforms3d library
            quat_tf = transforms3d.taitbryan.euler2quat(yaw, pitch, roll)
            imu_data.set_quaternions(quat_tf[0], quat_tf[1], quat_tf[2], quat_tf[3])

        def __altitude():
            # global gps_data
            altitude = decoded_msgs["In_Height"]
            gps_data.set_altitude(altitude)

        def __ins_time_utc():
            """Realtime not used right now, timestamp ROS is already added in GPS_absolut. TBD"""
            millisec = decoded_msgs["INS_Time_Millisec"]
            time.secs = (millisec / 1000) % 60
            time.nsecs = 0  # TBD

        def __gps_absolut():
            lat = decoded_msgs["In_Lat"]
            longi = decoded_msgs["In_Long"]

            gps_data.set_lat_long(latitude=lat, longitude=longi)
            gps_data.set_time(secs=secs, nsecs=nsecs)

        def __ins_expected_velocity_tilt_error():
            in_stddev_vxf = decoded_msgs["In_Stddev_VXF"]
            in_stddev_vyf = decoded_msgs["In_Stddev_VYF"]
            in_stddev_vzf = decoded_msgs["In_Stddev_VZF"]
            in_stddev_roll = decoded_msgs["In_Stddev_Roll"]
            in_stddev_pitch = decoded_msgs["In_Stddev_Pitch"]
            in_stddev_yaw = decoded_msgs["In_Stddev_Yaw"]

        def __analog_inputs():
            analog_in_one = decoded_msgs["AN1"]
            analog_in_two = decoded_msgs["AN2"]
            analog_in_three = decoded_msgs["AN3"]
            analog_in_four = decoded_msgs["AN4"]

        def __default():
            """ If user enters invalid option then this method will be called """
            #print "Unkonwn ID " + str(can_id)
            unknown_can_id_data.set_types_values(
                can_id=can_id, can_msgs=decoded_msgs, header=header
            )

        def __get_id(can_id):
            switcher = {
                base_id_adma + 1: __status_bits,
                base_id_adma + 2: __error_bits,
                base_id_adma + 6: __rates_body,
                base_id_adma + 8: __acc_body,
                base_id_adma + 49: __euler_to_quaternions,
                base_id_adma + 51: __altitude,
                base_id_adma + 56: __ins_time_utc,
                base_id_adma + 57: __gps_absolut,
                base_id_adma + 83: __ins_expected_velocity_tilt_error,
                base_id_adma + 84: __analog_inputs,
            }
            func = switcher.get(can_id, __default)
            return func()

        __get_id(can_id)

    def __callback(can_msg_frame):
        """Subscribe to CAN messages, decode ADMA and other (TBD) sensor data, then publish
        data in right format to different topics """
        output = None
        if can_msg_frame.id < base_id_adma or can_msg_frame.id > base_id_adma + 84:
            # output = db_sensors.decode_message(can_msg_frame.id, can_msg_frame.data)
            print(
                "Please insert ID in DBC Sensor file"
                + can_msg_frame.id
                + " Data: "
                + str(can_msg_frame.data)
            )
        else:
            output = db_adma.decode_message(can_msg_frame.id, can_msg_frame.data)

        if output is not None:
            __convert_msgs(msg_frame=can_msg_frame, decoded_msgs=output)

        def __publish_status_errors():
            pub_status_errors.publish(status_errors.publish_status_errors())

        def __publish_orientation():
            pub_imu.publish(imu_data.publish_imu_data())

        def __publish_gps():
            pub_gps.publish(gps_data.publish_gps_data())

        def __default():
            pub_unknown_ids.publish(unknown_can_id_data.publish_types_values())

        def __publish_to_topic(can_id):
            switcher = {
                base_id_adma + 2: __publish_status_errors,
                base_id_adma + 8: __publish_orientation,
                base_id_adma + 49: __publish_orientation,
                base_id_adma + 57: __publish_gps,
            }
            func = switcher.get(can_id, __default)
            return func()

        __publish_to_topic(can_msg_frame.id)

    rospy.init_node("adma_CAN_msg_translator", anonymous=True)
    rospy.Subscriber("received_messages", Frame, __callback, queue_size=50)
    rospy.spin()


if __name__ == "__main__":
    try:
        decode_can_bus_msgs()

    except rospy.ROSInterruptException:
        pass
